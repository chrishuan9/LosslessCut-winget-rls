name: Sync LosslessCut Release

on:
  push:
    branches:
      - main

jobs:
  sync_release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Get the latest release info from LosslessCut
      - name: Get Latest Release Info
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_ACTION_TOKEN }}
        run: |
          echo "Fetching latest release from mifi/lossless-cut..."
          RELEASE_INFO=$(gh api repos/mifi/lossless-cut/releases/latest)
          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r .tag_name)
          RLS_BODY=$(echo "$RELEASE_INFO" | jq -r .body)
          ASSET_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith("win-x64.7z")) | .browser_download_url')

          if [ -z "$ASSET_URL" ]; then
            echo "No .7z asset found in the latest release."
            exit 1
          fi

          echo "Latest release tag: $TAG_NAME"
          echo "Asset URL: $ASSET_URL"
          echo "RLS Body: $RLS_BODY"

          # Use a delimiter to preserve newlines in rls_body
          echo "rls_body<<EOF" >> $GITHUB_ENV
          echo "$RLS_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "asset_url=$ASSET_URL" >> $GITHUB_ENV

      # Compare with the last processed version
      - name: Compare Release Version
        id: compare
        run: |
          echo "Retrieving latest processed version..."
          if [ -f LATEST_RELEASE ]; then
            LATEST_PROCESSED_VERSION=$(cat LATEST_RELEASE)
          else
            LATEST_PROCESSED_VERSION=""
          fi
          echo "Latest processed version: $LATEST_PROCESSED_VERSION"
          echo "New release version: ${{ env.tag_name }}"

          if [ "$LATEST_PROCESSED_VERSION" == "${{ env.tag_name }}" ]; then
            echo "No new release found. Exiting."
            echo "new_release=false" >> $GITHUB_ENV
          else
            echo "New release found. Proceeding."
            echo "new_release=true" >> $GITHUB_ENV
          fi

      # Download the .7z asset
      - name: Download .7z Asset
        if: ${{ env.new_release }} == 'true'
        run: |
          echo "Downloading .7z file..."
          curl -L "${{ env.asset_url }}" --output losslesscut.7z

      # Extract the .7z archive
      - name: Extract 7zip Archive
        if: ${{ env.new_release }} == 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y p7zip-full
          mkdir losslesscut_extracted
          7z x -olosslesscut_extracted losslesscut.7z

      # Create a .zip file with the version number in the file name
      - name: Create Zip Archive with Version
        if: ${{ env.new_release }} == 'true'
        run: |
          ZIP_FILENAME="losslesscut-${{ env.tag_name }}.zip"
          cd losslesscut_extracted
          zip -r "../$ZIP_FILENAME" ./*
          cd ..
          echo "Created zip file: $ZIP_FILENAME"
          echo "zip_filename=$ZIP_FILENAME" >> $GITHUB_ENV

      # Create a release and upload the .zip file
      - name: Create Release and Upload Asset
        if: ${{ env.new_release }} == 'true'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "losslesscut-${{ env.tag_name }}"
          name: "LosslessCut ${{ env.tag_name }}"
          body: "${{ env.rls_body }}"
          draft: false
          prerelease: false
          artifacts: ${{ env.zip_filename }}

      # Save the processed version
      - name: Save Processed Release Version
        if: ${{ env.new_release }} == 'true'
        run: echo "${{ env.tag_name }}" > LATEST_RELEASE

      # Commit and push the updated version file
      - name: Commit and Push Version File
        
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_ACTION_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add LATEST_RELEASE
          git commit -m "Update latest processed release to ${{ env.tag_name }}"
          git push